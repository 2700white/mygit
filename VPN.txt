安装 pip
pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。

在控制台执行以下命令安装 pip：

[root@server ~]# curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
[root@server ~]# python get-pip.py
安装配置 shadowsocks
在控制台执行以下命令安装 shadowsocks：

[root@server ~]# pip install --upgrade pip
[root@server ~]# pip install shadowsocks
安装完成后，需要创建shadowsocks的配置文件/etc/shadowsocks.json，编辑内容如下：

[root@server ~]# vim /etc/shadowsocks.json
{
  "server": "0.0.0.0",
  "local_address": "127.0.0.1",
  "local_port": 1080,
  "port_password": {
    "8080": "填写密码",
    "8081": "填写密码"
  },
  "timeout": 600,
  "method": "aes-256-cfb"
}
说明：

method为加密方法，可选aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table
port_password为端口对应的密码，可使用密码生成工具生成一个随机密码
以上两项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。

如果你不需要配置多个端口的话，仅配置单个端口，则可以使用以下配置：

{
  "server": "0.0.0.0",
  "server_port": 8080,
  "password": "填写密码",
  "method": "aes-256-cfb"
}
说明：

server_port为服务监听端口
password为密码
同样的以上两项信息在配置 shadowsocks 客户端时需要配置一致。

配置自启动
编辑shadowsocks 服务的启动脚本文件，内容如下：

[Unit]
Description=Shadowsocks service
After=network.target
 
[Service]
Type=simple
User=root
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json
ExecReload=/bin/kill -HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID 
PrivateTmp=true
KillMode=process
Restart=on-failure
RestartSec=5s
 
[Install]
WantedBy=multi-user.target

执行以下命令启动 shadowsocks 服务：

[root@server ~]# systemctl enable shadowsocks
[root@server ~]# systemctl start shadowsocks
检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：

systemctl status shadowsocks -l


确认服务启动成功后，配置防火墙规则，开放你配置的端口，不然客户端是无法连接的：

[root@server ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanent
success
[root@server ~]# firewall-cmd --zone=public --add-port=8081/tcp --permanent
success
[root@server ~]# firewall-cmd --reload
success



附上一键安装脚本代码：

#!/bin/bash
# Install Shadowsocks on CentOS 7

echo "Installing Shadowsocks..."

CONFIG_FILE=/etc/shadowsocks.json
SERVICE_FILE=/etc/systemd/system/shadowsocks.service
SS_IP=78.141.211.72
SS_PASSWORD=liyi18870249490
SS_PORT=8181
SS_METHOD=aes-256-cfb
SS_IP=`ip route get 1 | awk '{print $NF;exit}'`
GET_PIP_FILE=/tmp/get-pip.py

# install pip
curl "https://bootstrap.pypa.io/get-pip.py" -o "${GET_PIP_FILE}"
python ${GET_PIP_FILE}

# install shadowsocks
pip install --upgrade pip
pip install shadowsocks

# create shadowsocls config
cat <<EOF | sudo tee ${CONFIG_FILE}
{
  "server": "${SS_IP}",
  "server_port": ${SS_PORT},
  "password": "${SS_PASSWORD}",
  "method": "${SS_METHOD}",
  "fast_open":true
}
EOF

# create service
cat <<EOF | sudo tee ${SERVICE_FILE}
[Unit]
Description=Shadowsocks service
After=network.target
 
[Service]
Type=simple
User=root
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json
ExecReload=/bin/kill -HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID 
PrivateTmp=true
KillMode=process
Restart=on-failure
RestartSec=5s
 
[Install]
WantedBy=multi-user.target
EOF

# start service
systemctl enable shadowsocks
systemctl start shadowsocks

# view service status
sleep 5
systemctl status shadowsocks -l

echo "==========firewall 8181============"
firewall-cmd --zone=public --add-port=8181/tcp --permanent
echo "==========firewall reload============"
firewall-cmd --reload

echo "================================"
echo ""
echo "Congratulations! Shadowsocks has been installed on your system."
echo "You shadowsocks connection info:"
echo "--------------------------------"
echo "server:      ${SS_IP}"
echo "server_port: ${SS_PORT}"
echo "password:    ${SS_PASSWORD}"
echo "method:      ${SS_METHOD}"
echo "--------------------------------"

echo "--------yum install ifconfig --------"
yum install net-tools.x86_64

rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
echo "------yum-----"
yum --enablerepo=elrepo-kernel install kernel-ml -y

egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'
grub2-set-default 0

echo "------reboot------"
reboot


bbr
升级内核，第一步首先是升级内核到支持BBR的版本：
1.yum更新系统版本：

yum update

2.查看系统版本：

[root@server ~]# cat /etc/redhat-release 
CentOS Linux release 7.4.1708 (Core) 
[root@server ~]# 
3.安装elrepo并升级内核：

[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y
4.更新grub文件并重启系统：

[root@server ~]# egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'
CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)
CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)
CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)
[root@server ~]# grub2-set-default 0
[root@server ~]# reboot
5.重启完成后查看内核是否已更换为4.14版本：

[root@server ~]# uname -r
4.14.14-1.el7.elrepo.x86_64
[root@server ~]#
6.开启bbr：

[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
7.加载系统参数：

[root@vultr ~]# sysctl -p
net.ipv6.conf.all.accept_ra = 2
net.ipv6.conf.eth0.accept_ra = 2
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
[root@vultr ~]#
如上，输出了我们添加的那两行配置代表正常。

8.确定bbr已经成功开启：

[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control
net.ipv4.tcp_available_congestion_control = bbr cubic reno
[root@vultr ~]# lsmod | grep bbr
tcp_bbr                20480  2 
[root@vultr ~]# 
输出内容如上，则表示bbr已经成功开启。


# yum install -y pptp pptp-setup ppp

# pptpsetup --create vpn520 --server 45.32.37.162 --username root --password 270061114

# cp /usr/share/doc/ppp-2.4.5/scripts/pon /usr/sbin/
# cp /usr/share/doc/ppp-2.4.5/scripts/poff /usr/sbin/
# chmod u+x /usr/sbin/pon /usr/sbin/poff
# pon vpn520
# ifconfig | grep 'inet addr'


#锐速--换内核
wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh


yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install

//安装疯狂版
wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh && bash serverspeeder.sh

#卸载
chattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f


#测速
wget --no-check-certificate -O speedtest https://raw.github.com/sivel/speedtest-cli/master/speedtest.py
 
chmod +x speedtest

https://www.speedtest.net/speedtest-servers-static.php

./speedtest --server 4515

--系统优化
vi /etc/sysctl.conf

# max open files
fs.file-max = 1024000
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096
# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3

sysctl -p

vi /etc/security/limits.conf
*               soft    nofile           512000
*               hard    nofile          1024000

vi /etc/pam.d/common-session
session required pam_limits.so

vi /etc/profile
ulimit -SHn 1024000

reboot 后ulimit -n返回1024000

